import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = '7935696999:AAGtlDka3hYCJ-uzKcF8d9LMOZ-5I-cf-3k'  # API tokeningizni kiriting
ADMIN_ID = 6362676903  # Adminning ID raqamini yozing

bot = telebot.TeleBot(API_TOKEN)

# Boshlang'ich xabar va asosiy menyu
@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_text = "Salom! Savdogar Invest botiga xush kelibsiz!"
    bot.send_message(message.chat.id, welcome_text, reply_markup=main_menu())

# Asosiy menyu
def main_menu():
    markup = InlineKeyboardMarkup()
    info_button = InlineKeyboardButton("Bot haqida to'liq ma'lumot", callback_data="info")
    admin_button = InlineKeyboardButton("Admin bilan bog'lanish", callback_data="contact_admin")
    markup.add(info_button, admin_button)
    return markup

# "Bot haqida to'liq ma'lumot" tugmasi bosilganda
@bot.callback_query_handler(func=lambda call: call.data == "info")
def send_info(call):
    info_text = """
    üîπ Bu bot sizga trading bo'yicha ma'lumotlar beradi.
    üîπ Kurslar, darsliklar va strategiyalar bilan tanishing.
    üîπ Yangiliklar va resurslarga havolalar mavjud.
    üîπ Chet va UZB kuchli Mentorship lari tomonidan o'tilgan premium darsliklar.
    
    RFX PSS - Private Student Server
    (333+ lesson)

    1) FULL SMC COURSE
    - Market structure
    - Bos/choch to'g'ri aniqlash
    - Theory/practice
    - IDM
    - IMB/FVG
    - OB
    - Confirmation entry types

    2) FULL ICT theory
    - Liquidity bsl/ssl/p
    - Premium/Discount
    - mss/sweep structure
    - Smart money tool
    - Single candle order block
    - Optimal trade entry
    - AMD types
    - Turtle soup

    3) CRT Theory
    - sniper entry
    - sniper close
    - Liquidity hunter

    4) Fibo coach 3+
    5) Price action
    6) Risk va money management
    7) Golden psychology
    8) Fundamental analysis
    9) SnR & SnD
    10) Classica & Trend line

    ‚ùì Nega bepul emas?
    Bepul narsalar hech qachon qadrli bo‚Äòlmagan. ü´° Shuning uchun, sizning o‚Äòqishingiz va muvaffaqiyatingiz uchun kichik, lekin ahamiyatli to‚Äòlov belgilandi.

    Trading isn't a sprint, it's just a simple marathon. üèå
    """
    markup = InlineKeyboardMarkup()
    subscribe_button = InlineKeyboardButton("Obuna haqida ma'lumot", callback_data="subscribe_info")
    back_button = InlineKeyboardButton("Orqaga", callback_data="back_to_main")
    markup.add(subscribe_button, back_button)

    bot.send_message(call.message.chat.id, info_text, reply_markup=markup)

# "Admin bilan bog'lanish" tugmasi bosilganda
@bot.callback_query_handler(func=lambda call: call.data == "contact_admin")
def contact_admin(call):
    admin_message = "Sizning admin bilan bog'lanishingiz uchun quyidagi tugma orqali to'g'ridan-to'g'ri admin bilan suhbatni boshlashingiz mumkin."

    markup = InlineKeyboardMarkup()
    contact_button = InlineKeyboardButton("Admin bilan bog'lanish", url="tg://user?id=" + str(6450282846))
    markup.add(contact_button)

    bot.send_message(call.message.chat.id, admin_message, reply_markup=markup)

# To'lov uchun tasdiqlash va boshqa jarayonlar
@bot.callback_query_handler(func=lambda call: call.data == "subscribe_info")
def send_subscription_info(call):
    subscription_info_text = """
    üì• Kurs uchun to'lov qilish tartibi haqida qisqacha:

üìÖ " 1" oylik uchun  19.99$ ( hozirgi kundagi kursini hisoblab tashlang )
üßæ " 3 + 1 " oylik uchun 39.99$ ( hozirgi kundagi kursini hisoblab tashlang ) 
üßæ" 1 yillik " 69.99$ (hozirgi kundagi kursini hisoblab tashlang)

üìù To'lovni amalga oshirganingizdan so'ng quyidagi:
‚Äú To‚Äôlov qildim ‚úÖ ‚Äù tugmasini bosing.

üí≥ Karta raqam:
  
  5614682215079353 Uzcard ( Bekzod Shukurov)

Visa Card:
  
    4278 3200 2494 1568 Visa ( Bekzod Shukurov)

üó≥ Crypto address:

  TGfG18noo5FNKcwXj6XMHRhFdxaujjux9g (#TRC20)
    """
    markup = InlineKeyboardMarkup()
    pay_button = InlineKeyboardButton("To'lov qildim ‚úÖ", callback_data="payment_done")
    back_button = InlineKeyboardButton("Orqaga", callback_data="back_to_info")
    markup.add(pay_button, back_button)

    bot.send_message(call.message.chat.id, subscription_info_text, reply_markup=markup)
# "To'lov qildim ‚úÖ" tugmasi bosilganda
@bot.callback_query_handler(func=lambda call: call.data == "payment_done")
def payment_done(call):
    bot.send_message(call.message.chat.id, "‚¨áÔ∏è To'lov chekini shu yerga tashlang ‚¨áÔ∏è")

# To'lov cheki yuborilganda ishlash
@bot.message_handler(content_types=['photo'])
def handle_payment_receipt(message):
    bot.send_message(message.chat.id, "To'lovingiz qabul qilindi. Tasdiqlash uchun kuting.")
    
    # Adminga to'lov cheki yuboriladi
    bot.send_photo(ADMIN_ID, message.photo[-1].file_id, caption=f"Yangi to'lov cheki.\nFoydalanuvchi ID: {message.from_user.id}")
    
    markup = InlineKeyboardMarkup()
    approve_button = InlineKeyboardButton(f"To'lovni tasdiqlash: {message.from_user.id}", callback_data=f"approve_payment_{message.from_user.id}")
    markup.add(approve_button)
    
    bot.send_message(ADMIN_ID, f"Foydalanuvchi {message.from_user.id} to'lov chekini yubordi. Tasdiqlash uchun quyidagi tugmani bosing.", reply_markup=markup)

# Tasdiqlash tugmasi bosilganda (to'lov tasdiqlash)
@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_payment_"))
def approve_payment(call):
    try:
        user_id = int(call.data.split("_")[2])  # Foydalanuvchi ID raqamini ajratib olish

        bot.answer_callback_query(call.id, "To'lov tasdiqlanishi boshlandi.")

        bot.send_message(user_id, "To'lovingiz tasdiqlandi! O'zingiz haqingizda ma'lumot yuboring pastda ko'rsatilgandek.")

        bot.send_message(user_id, """
        üë§ Ism familiya : 
        ‚úçüèæ Telegram username : 
        üì≤ Telefon raqamingiz :
        """)

        @bot.message_handler(func=lambda message: message.from_user.id == user_id)
        def collect_user_info(message):
            user_info = message.text
            bot.send_message(ADMIN_ID, f"Yangi foydalanuvchi ma'lumotlari:\n{user_info}")
            
            bot.send_message(ADMIN_ID, "Iltimos, foydalanuvchi ma'lumotlarini tekshiring va havola yuboring.")

            bot.send_message(user_id, "Ma'lumotlaringiz qabul qilindi. Rahmat! Tez orada ularni tekshirib sizga yopiq guruh havolasini yuboramiz.")

            markup = InlineKeyboardMarkup()
            send_link_button = InlineKeyboardButton("Havolani yuborish", callback_data=f"send_link_{user_id}")
            main_menu_button = InlineKeyboardButton("Asosiy menyu", callback_data="back_to_main")
            markup.add(send_link_button, main_menu_button)

            bot.send_message(ADMIN_ID, "Foydalanuvchi ma'lumotlarini tekshirib, havola yuboring.", reply_markup=markup)

    except Exception as e:
        bot.send_message(ADMIN_ID, f"Xatolik yuz berdi: {e}")
        print(f"Xatolik yuz berdi: {e}")

# Foydalanuvchining ma'lumotlari tasdiqlangandan so'ng havola yuborish
@bot.callback_query_handler(func=lambda call: call.data.startswith("send_link_"))
def send_link_to_user(call):
    user_id = int(call.data.split("_")[2])  # Foydalanuvchi ID raqamini ajratib olish
    bot.send_message(user_id, "Mana sizning havolangiz: https://t.me/addlist/vGa48GT0uxhlM2Ji")

    # Asosiy menyu tugmasini qo'shish
    markup = InlineKeyboardMarkup()
    main_menu_button = InlineKeyboardButton("Asosiy menyu", callback_data="back_to_main")
    markup.add(main_menu_button)

    bot.send_message(user_id, "Bilim olishdan to'xtab qolmang!", reply_markup=markup)
    bot.send_message(ADMIN_ID, "Havola foydalanuvchiga yuborildi.")

# "Orqaga" tugmasi bosilganda
@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def back_to_main(call):
    bot.send_message(call.message.chat.id, "Asosiy menyu:", reply_markup=main_menu())

# Botni ishga tushirish
bot.polling(none_stop=True)